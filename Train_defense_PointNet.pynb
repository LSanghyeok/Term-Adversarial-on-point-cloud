{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "import torch.nn.functional as F\n",
    "\n",
    "from loader import get_dataloader\n",
    "from train import run, run_defense\n",
    "from models import PointNet, PointCNN, Defense_PointNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available devices  1\n",
      "Current cuda device  0\n",
      "GeForce RTX 2080 Ti\n"
     ]
    }
   ],
   "source": [
    "epochs=200\n",
    "b_size=16\n",
    "lr=0.001\n",
    "lr_decay=0.5\n",
    "lr_decay_step=50\n",
    "weight_decay=0\n",
    "eps = 0.1\n",
    "num_class = 10 #\n",
    "name = '{}'.format(num_class)\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "train_loader, test_loader = get_dataloader(1024, b_size)\n",
    "print ('Available devices ', torch.cuda.device_count())\n",
    "print ('Current cuda device ', torch.cuda.current_device())\n",
    "print(torch.cuda.get_device_name(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PointNet(\n",
       "  (conv1): PointConv(local_nn=Sequential(\n",
       "    (0): Linear(in_features=3, out_features=64, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Linear(in_features=64, out_features=64, bias=True)\n",
       "  ), global_nn=None)\n",
       "  (conv2): PointConv(local_nn=Sequential(\n",
       "    (0): Linear(in_features=67, out_features=128, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Linear(in_features=128, out_features=128, bias=True)\n",
       "  ), global_nn=None)\n",
       "  (conv3): PointConv(local_nn=Sequential(\n",
       "    (0): Linear(in_features=131, out_features=256, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Linear(in_features=256, out_features=256, bias=True)\n",
       "  ), global_nn=None)\n",
       "  (lin1): Linear(in_features=256, out_features=256, bias=True)\n",
       "  (lin2): Linear(in_features=256, out_features=256, bias=True)\n",
       "  (lin3): Linear(in_features=256, out_features=10, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_a = PointNet(num_class)\n",
    "PATH = \"saves/PointNet.pth\"\n",
    "model_a.load_state_dict(torch.load(PATH))\n",
    "model_a.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/5 cls_loss : 2.1797, discriminator_loss : 0.8210, feature_loss : 0.3239 \n",
      "2/5 cls_loss : 2.1555, discriminator_loss : 0.8335, feature_loss : 0.3021 \n"
     ]
    }
   ],
   "source": [
    "#Train\n",
    "model = Defense_PointNet(num_class)\n",
    "run_defense(train_loader, test_loader, model, model_a, epochs, b_size, lr,\n",
    "    lr_decay, lr_decay_step, weight_decay, eps, device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load pretrained\n",
    "from train import test\n",
    "PATH = \"saves/\"+model._get_name() +\".pth\"\n",
    "model.load_state_dict(torch.load(PATH))\n",
    "model.eval()\n",
    "\n",
    "#test the loaded model\n",
    "model = model.to(device)\n",
    "test_acc = test(model,test_loader, device)\n",
    "print (\"test acc: {:.04f}\".format(test_acc))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
